@namespace Microsoft.AspNetCore.Components

@if (CurrentAuthenticationState.IsPending)
{
    @Authorizing
}
else if (IsAuthorized())
{
    @((Authorized ?? ChildContent)?.Invoke(CurrentAuthenticationState))
}
else
{
    @NotAuthorized
}

@functions {
    [CascadingParameter] public IAuthenticationState CurrentAuthenticationState { get; private set; }

    /// <summary>
    /// The content that will be displayed if the user is authorized.
    /// </summary>
    [Parameter] public RenderFragment<IAuthenticationState> ChildContent { get; private set; }

    /// <summary>
    /// The content that will be displayed if the user is not authorized.
    /// </summary>
    [Parameter] public RenderFragment NotAuthorized { get; private set; }

    /// <summary>
    /// The content that will be displayed if the user is authorized.
    /// If you specify a value for this parameter, do not also specify a value for <see cref="ChildContent"/>.
    /// </summary>
    [Parameter] public RenderFragment<IAuthenticationState> Authorized { get; private set; }

    /// <summary>
    /// The content that will be displayed while asynchronous authorization is in progress.
    /// </summary>
    [Parameter] public RenderFragment Authorizing { get; private set; }

    public override Task SetParametersAsync(ParameterCollection parameters)
    {
        var result = base.SetParametersAsync(parameters);

        // We allow 'ChildContent' for convenience in basic cases, and 'Authorized' for symmetry
        // with 'NotAuthorized' in other cases. Besides naming, they are equivalent. To avoid
        // confusion, explicitly prevent the case where both are supplied.
        if (ChildContent != null && Authorized != null)
        {
            throw new InvalidOperationException($"When using {nameof(AuthorizeView)}, do not specify both '{nameof(Authorized)}' and '{nameof(ChildContent)}'.");
        }

        return result;
    }

    private bool IsAuthorized()
    {
        // TODO: Support various authorization condition parameters, equivalent to those offered
        // by the [Authorize] attribute, e.g., "Roles" and "Policy". This is on hold until we're
        // able to reference the policy evaluator APIs from this package.

        return CurrentAuthenticationState.User?.Identity?.IsAuthenticated == true;
    }
}
